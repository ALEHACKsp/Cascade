#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba32f) uniform readonly image2D inputImage;
layout (binding = 1, rgba32f) uniform readonly image2D mask;
layout (binding = 2, rgba32f) uniform image2D resultImage;

layout(set = 0, binding = 3) uniform InputBuffer
{
    layout(offset = 0) float bRed;
    layout(offset = 4) float bGreen;
    layout(offset = 8) float bBlue;
    layout(offset = 12) float bAlpha;
    layout(offset = 16) float angle;
    layout(offset = 20) float strength;
    layout(offset = 24) float iterations;
    layout(offset = 28) float gain;
} sb;

float blurX = sb.strength * cos(radians(sb.angle)) * 10;
float blurY = sb.strength * sin(radians(sb.angle)) * 10;

float random(vec3 scale, float seed)
{
    return fract(sin(dot(gl_GlobalInvocationID.xyz + seed, scale)) * 8643.5453 + seed);
}

void main()
{   
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

    vec4 original = imageLoad(inputImage, pixelCoords).rgba;

    vec2 direction;
    direction = vec2(blurX, blurY);

    float noise = random(vec3(543.12341, 74.30434, 13123.4234234), 2.0);
    vec4 color = vec4(0.0);
    float ws = 0.0;

    for (float steps = -sb.iterations; steps <= sb.iterations; steps++)
    {
        float p = (steps + noise - 0.5) / 16.0;
        float w = 1.0 - abs(p);
        ivec2 coords = ivec2(pixelCoords.x + direction.x * p, pixelCoords.y + direction.y * p);
        color += imageLoad(inputImage, coords).rgba * w;
        ws += w;
    }

    vec4 pixel = color.rgba / ws * sb.gain;

    if (sb.bRed == 0.0)
    {
        pixel.r = original.r;
    }
    if (sb.bGreen == 0.0)
    {
        pixel.g = original.g;
    }
    if (sb.bBlue == 0.0)
    {
        pixel.b = original.b;
    }
    if (sb.bAlpha == 0.0)
    {
        pixel.a = original.a;
    }

    imageStore(resultImage, pixelCoords, pixel);
}
