#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba32f) uniform readonly image2D inputImageBack;
layout (binding = 1, rgba32f) uniform readonly image2D inputImageFront;
layout (binding = 2, rgba32f) uniform image2D resultImage;

layout(push_constant) uniform pushConstants {
    layout(offset = 0) float mode;
    layout(offset = 4) float xoffset;
    layout(offset = 8) float yoffset;
    layout(offset = 12) float opacity;
} pc;

void main()
{   
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);   

    ivec2 targetCoords = ivec2(pixelCoords.x - pc.xoffset, pixelCoords.y - pc.yoffset); 

    vec4 back = imageLoad(inputImageBack, pixelCoords).rgba;

    vec4 front = imageLoad(inputImageFront, targetCoords).rgba;

    if(pc.mode == 0.0) // Over
    {
        if (pc.opacity != 0.0)
        {
            back = (front * pc.opacity)  + back * (1.0 - front.a);
        }
    }
    else if (pc.mode == 1.0) // Add
    {
        back += (front * pc.opacity);
    }
    else if (pc.mode == 2.0) // Divide
    {
        if (front.r <= 0.0)
        {
            back.r = 0;
        }
        else
        {
            if (pc.opacity != 0.0)
            {
                back.r = ((1.0 - pc.opacity) * back.r) + ((back.r / front.r) * pc.opacity);
            }
        }
        if (front.g <= 0.0)
        {
            back.g = 0;
        }
        else
        {
            if (pc.opacity != 0.0)
            {
                back.g = ((1.0 - pc.opacity) * back.g) + ((back.g / front.g) * pc.opacity);
            }
        }
        if (front.b <= 0.0)
        {
            back.b = 0;
        }
        else
        {
            if (pc.opacity != 0.0)
            {
                back.b = ((1.0 - pc.opacity) * back.b) + ((back.b / front.b) * pc.opacity);
            }
        }
    }
    else if (pc.mode == 3.0) // Minus
    {
        back -= (front * pc.opacity);
    }
    else if (pc.mode == 4.0) // Multiply
    {
        if (pc.opacity != 0.0)
        {
            back = ((1.0 - pc.opacity) * back) + (back * front * pc.opacity);
        }
    }

	imageStore(resultImage, pixelCoords, back);                                
} 