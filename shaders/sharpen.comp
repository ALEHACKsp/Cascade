#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 1, rgba8) uniform image2D resultImage;

layout(push_constant) uniform pushConstants {
    layout(offset = 0) float amount;
}  pc;

vec3 conv(in float[9] kernel, in vec3[9] data) 
{
   vec3 res = {0.0, 0.0, 0.0};
   for (int i=0; i<9; ++i) 
   {
      res += kernel[i] * data[i];
   }
   return res;
}

struct ImageData 
{
	 vec3 rgb[9];
} imageData;    

void main()
{   
    // Fetch neighbouring texels
    int n = -1;
    for (int i=-1; i<2; ++i) 
    {   
        for(int j=-1; j<2; ++j) 
        {    
            n++;    
            vec3 rgb = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.x + i, gl_GlobalInvocationID.y + j)).rgb;
            imageData.rgb[n] = rgb;
        }
    }

    vec3 original = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)).rgb;

    float[9] kernel;
    kernel[0] = -1.0; kernel[1] =  -1.0; kernel[2] =  -1.0;
    kernel[3] = -1.0; kernel[4] = 8.0; kernel[5] =  -1.0;
    kernel[6] = -1.0; kernel[7] =  -1.0; kernel[8] = -1.0;

    vec4 res;        
  
    if(pc.amount == 0.0)
    {
        res = vec4(original, 1.0);
    }      
    else
    {
        res = vec4(vec3(conv(kernel, imageData.rgb) / (100 / pc.amount) + original), 1.0);
    }                    

    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), res);
}